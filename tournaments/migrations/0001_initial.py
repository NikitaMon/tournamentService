# Generated by Django 5.2.1 on 2025-05-23 14:29

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FightingStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Вид борьбы')),
            ],
            options={
                'verbose_name': 'Вид борьбы',
                'verbose_name_plural': 'Виды борьбы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TournamentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight_categories', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), blank=True, default=list, null=True, size=None)),
                ('edit', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True, verbose_name='Название турнира')),
                ('image', models.ImageField(blank=True, upload_to='tournaments/', verbose_name='Изображение')),
                ('location', models.TextField(verbose_name='Место проведения')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('early_registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания ранней регистрации')),
                ('early_registration_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена ранней регистрации')),
                ('regular_registration_end', models.DateTimeField(null=True, verbose_name='Дата окончания обычной регистрации')),
                ('regular_registration_price', models.DecimalField(decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена обычной регистрации')),
                ('late_registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания поздней регистрации')),
                ('late_registration_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена поздней регистрации')),
                ('registration_deadline', models.DateTimeField(verbose_name='Дата завершения регистрации')),
                ('tournament_start', models.DateTimeField(verbose_name='Дата начала соревнований')),
                ('tournament_end', models.DateTimeField(verbose_name='Дата окончания соревнований')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Максимальное количество участников')),
                ('payment_required', models.BooleanField(default=True, verbose_name='Требуется оплата')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('published', 'Опубликован'), ('cancelled', 'Отменен')], default='draft', max_length=20)),
                ('Profile_organizer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.profile_organizer')),
                ('fighting_styles', models.ManyToManyField(blank=True, to='tournaments.fightingstyle')),
                ('TournamentCategory', models.ManyToManyField(blank=True, null=True, related_name='tournaments', to='tournaments.tournamentcategory', verbose_name='Категории')),
            ],
            options={
                'verbose_name': 'Турнир',
                'verbose_name_plural': 'Турниры',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight_category', models.PositiveSmallIntegerField(verbose_name='Весовая категория')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('Profile_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='accounts.profile_user')),
                ('unregistered_participant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='accounts.unregisteredparticipant')),
                ('Tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='tournaments.tournament')),
                ('tournament_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='tournaments.tournamentcategory', verbose_name='Категории')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentCategoryTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_type', models.CharField(max_length=20)),
                ('code', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=40)),
                ('gender', models.CharField(choices=[('М', 'Мужчины'), ('Ж', 'Женщины')], max_length=1)),
                ('age_from', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('age_to', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('weight_categories', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), default=list, size=None)),
                ('is_standard', models.BooleanField(default=True)),
                ('fighting_style', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.fightingstyle')),
            ],
            options={
                'verbose_name': 'Шаблон Категории',
                'verbose_name_plural': 'Шаблоны Категорий',
            },
        ),
        migrations.AddField(
            model_name='tournamentcategory',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournaments.tournamentcategorytemplate'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['title'], name='tournaments_title_e13147_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['registration_deadline'], name='tournaments_registr_c4ffa2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='registration',
            unique_together={('Tournament', 'Profile_user', 'tournament_category'), ('Tournament', 'unregistered_participant', 'tournament_category')},
        ),
    ]
