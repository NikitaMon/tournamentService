#user  www-data;
worker_processes  auto;
worker_rlimit_nofile 65535;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    # Basic Settings
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip Settings
    gzip  on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # HTTP server - redirect to HTTPS
    server {
        listen       80;
        server_name  mytournament.ru www.mytournament.ru;
        
        # Redirect all HTTP requests to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server 
    server {
        listen       80;
        server_name  mytournament.ru www.mytournament.ru localhost;

        # Logging
        access_log  /var/log/nginx/tournament.access.log  main;
        error_log   /var/log/nginx/tournament.error.log  warn;

        # Static files
        location /static/ {
            alias /var/www/tournament/staticfiles/;
            expires 30d;
            add_header Cache-Control "public, no-transform";
            access_log off;
            try_files $uri $uri/ =404;
        }

        # Media files
        location /media/ {
            alias /var/www/tournament/media/;
            expires 30d;
            add_header Cache-Control "public, no-transform";
            access_log off;
            try_files $uri $uri/ =404;
        }

        # Proxy to Gunicorn
        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://unix:/run/gunicorn.sock;
            proxy_redirect off;
            proxy_buffering off;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            proxy_send_timeout 300s;
            try_files $uri $uri/ /index.html;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
} 